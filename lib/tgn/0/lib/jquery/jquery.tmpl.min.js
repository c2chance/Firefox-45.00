(function(jQuery) {
    function newTmplItem(options, parentItem, fn, data) {
        var newItem = {
            data: data || (parentItem ? parentItem.data : {}),
            _wrap: parentItem ? parentItem._wrap : null ,
            tmpl: null ,
            parent: parentItem || null ,
            nodes: [],
            calls: tiCalls,
            nest: tiNest,
            wrap: tiWrap,
            html: tiHtml,
            update: tiUpdate
        };
        return options && jQuery.extend(newItem, options, {
            nodes: [],
            parent: parentItem
        }),
        fn && (newItem.tmpl = fn,
        newItem._ctnt = newItem._ctnt || newItem.tmpl(jQuery, newItem),
        newItem.key = ++itemKey,
        (stack.length ? wrappedItems : newTmplItems)[itemKey] = newItem),
        newItem
    }
    function build(tmplItem, nested, content) {
        var frag, ret = content ? jQuery.map(content, function(item) {
            return typeof item == "string" ? tmplItem.key ? item.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g, "$1 " + tmplItmAtt + '="' + tmplItem.key + '" $2') : item : build(item, tmplItem, item._ctnt)
        }) : tmplItem;
        return nested ? ret : (ret = ret.join(""),
        ret.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/, function(all, before, middle, after) {
            frag = jQuery(middle).get();
            storeTmplItems(frag);
            before && (frag = unencode(before).concat(frag));
            after && (frag = frag.concat(unencode(after)))
        }),
        frag ? frag : unencode(ret))
    }
    function unencode(text) {
        var el = document.createElement("div");
        return el.innerHTML = text,
        jQuery.makeArray(el.childNodes)
    }
    function buildTmplFn(markup) {
        return new Function("jQuery","$item","var $=jQuery,call,_=[],$data=$item.data;with($data){_.push('" + jQuery.trim(markup).replace(/([\\'])/g, "\\$1").replace(/[\r\t\n]/g, " ").replace(/\$\{([^\}]*)\}/g, "{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g, function(all, slash, type, fnargs, target, parens, args) {
            var tag = jQuery.tmpl.tag[type], def, expr, exprAutoFnDetect;
            if (!tag)
                throw "Template command not found: " + type;
            return def = tag._default || [],
            parens && !/\w$/.test(target) && (target += parens,
            parens = ""),
            target ? (target = unescape(target),
            args = args ? "," + unescape(args) + ")" : parens ? ")" : "",
            expr = parens ? target.indexOf(".") > -1 ? target + parens : "(" + target + ").call($item" + args : target,
            exprAutoFnDetect = parens ? expr : "(typeof(" + target + ")==='function'?(" + target + ").call($item):(" + target + "))") : exprAutoFnDetect = expr = def.$1 || "null",
            fnargs = unescape(fnargs),
            "');" + tag[slash ? "close" : "open"].split("$notnull_1").join(target ? "typeof(" + target + ")!=='undefined' && (" + target + ")!=null" : "true").split("$1a").join(exprAutoFnDetect).split("$1").join(expr).split("$2").join(fnargs ? fnargs.replace(/\s*([^\(]+)\s*(\((.*?)\))?/g, function(all, name, parens, params) {
                return params = params ? "," + params + ")" : parens ? ")" : "",
                params ? "(" + name + ").call($item" + params : all
            }) : def.$2 || "") + "_.push('"
        }) + "');}return _;")
    }
    function updateWrapped(options, wrapped) {
        options._wrap = build(options, !0, jQuery.isArray(wrapped) ? wrapped : [htmlExpr.test(wrapped) ? wrapped : jQuery(wrapped).html()]).join("")
    }
    function unescape(args) {
        return args ? args.replace(/\\'/g, "'").replace(/\\\\/g, "\\") : null 
    }
    function outerHtml(elem) {
        var div = document.createElement("div");
        return div.appendChild(elem.cloneNode(!0)),
        div.innerHTML
    }
    function storeTmplItems(content) {
        function processItemKey(el) {
            function cloneTmplItem(key) {
                key = key + keySuffix;
                tmplItem = newClonedItems[key] = newClonedItems[key] || newTmplItem(tmplItem, newTmplItems[tmplItem.parent.key + keySuffix] || tmplItem.parent, null , !0)
            }
            var pntKey, pntNode = el, pntItem, tmplItem, key;
            if (key = el.getAttribute(tmplItmAtt)) {
                while (pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute(tmplItmAtt)))
                    ;
                pntKey !== key && (pntNode = pntNode.parentNode ? pntNode.nodeType === 11 ? 0 : pntNode.getAttribute(tmplItmAtt) || 0 : 0,
                (tmplItem = newTmplItems[key]) || (tmplItem = wrappedItems[key],
                tmplItem = newTmplItem(tmplItem, newTmplItems[pntNode] || wrappedItems[pntNode], null , !0),
                tmplItem.key = ++itemKey,
                newTmplItems[itemKey] = tmplItem),
                cloneIndex && cloneTmplItem(key));
                el.removeAttribute(tmplItmAtt)
            } else
                cloneIndex && (tmplItem = jQuery.data(el, "tmplItem")) && (cloneTmplItem(tmplItem.key),
                newTmplItems[tmplItem.key] = tmplItem,
                pntNode = jQuery.data(el.parentNode, "tmplItem"),
                pntNode = pntNode ? pntNode.key : 0);
            if (tmplItem) {
                for (pntItem = tmplItem; pntItem && pntItem.key != pntNode; )
                    pntItem.nodes.push(el),
                    pntItem = pntItem.parent;
                delete tmplItem._ctnt;
                delete tmplItem._wrap;
                jQuery.data(el, "tmplItem", tmplItem)
            }
        }
        for (var keySuffix = "_" + cloneIndex, elem, elems, newClonedItems = {}, m, i = 0, l = content.length; i < l; i++)
            if ((elem = content[i]).nodeType === 1) {
                for (elems = elem.getElementsByTagName("*"),
                m = elems.length - 1; m >= 0; m--)
                    processItemKey(elems[m]);
                processItemKey(elem)
            }
    }
    function tiCalls(content, tmpl, data, options) {
        if (!content)
            return stack.pop();
        stack.push({
            _: content,
            tmpl: tmpl,
            item: this,
            data: data,
            options: options
        })
    }
    function tiNest(tmpl, data, options) {
        return jQuery.tmpl(jQuery.template(tmpl), data, options, this)
    }
    function tiWrap(call, wrapped) {
        var options = call.options || {};
        return options.wrapped = wrapped,
        jQuery.tmpl(jQuery.template(call.tmpl), call.data, options, call.item)
    }
    function tiHtml(filter, textOnly) {
        var wrapped = this._wrap;
        return jQuery.map(jQuery(jQuery.isArray(wrapped) ? wrapped.join("") : wrapped).filter(filter || "*"), function(e) {
            return textOnly ? e.innerText || e.textContent : e.outerHTML || outerHtml(e)
        })
    }
    function tiUpdate() {
        var coll = this.nodes;
        jQuery.tmpl(null , null , null , this).insertBefore(coll[0]);
        jQuery(coll).remove()
    }
    var oldManip = jQuery.fn.domManip, tmplItmAtt = "_tmplitem", htmlExpr = /^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /, newTmplItems = {}, wrappedItems = {}, appendToTmplItems, topTmplItem = {
        key: 0,
        data: {}
    }, itemKey = 0, cloneIndex = 0, stack = [];
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var ret = [], insert = jQuery(selector), elems, i, l, tmplItems, parent = this.length === 1 && this[0].parentNode;
            if (appendToTmplItems = newTmplItems || {},
            parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1)
                insert[original](this[0]),
                ret = this;
            else {
                for (i = 0,
                l = insert.length; i < l; i++)
                    cloneIndex = i,
                    elems = (i > 0 ? this.clone(!0) : this).get(),
                    jQuery.fn[original].apply(jQuery(insert[i]), elems),
                    ret = ret.concat(elems);
                cloneIndex = 0;
                ret = this.pushStack(ret, name, insert.selector)
            }
            return tmplItems = appendToTmplItems,
            appendToTmplItems = null ,
            jQuery.tmpl.complete(tmplItems),
            ret
        }
    });
    jQuery.fn.extend({
        tmpl: function(data, options, parentItem) {
            return jQuery.tmpl(this[0], data, options, parentItem)
        },
        tmplItem: function() {
            return jQuery.tmplItem(this[0])
        },
        template: function(name) {
            return jQuery.template(name, this[0])
        },
        domManip: function(args, table, callback) {
            if (args[0] && args[0].nodeType) {
                for (var dmArgs = jQuery.makeArray(arguments), argsLength = args.length, i = 0, tmplItem; i < argsLength && !(tmplItem = jQuery.data(args[i++], "tmplItem")); )
                    ;
                argsLength > 1 && (dmArgs[0] = [jQuery.makeArray(args)]);
                tmplItem && cloneIndex && (dmArgs[2] = function(fragClone) {
                    jQuery.tmpl.afterManip(this, fragClone, callback)
                }
                );
                oldManip.apply(this, dmArgs)
            } else
                oldManip.apply(this, arguments);
            return cloneIndex = 0,
            appendToTmplItems || jQuery.tmpl.complete(newTmplItems),
            this
        }
    });
    jQuery.extend({
        tmpl: function(tmpl, data, options, parentItem) {
            var ret, topLevel = !parentItem;
            if (topLevel)
                parentItem = topTmplItem,
                tmpl = jQuery.template[tmpl] || jQuery.template(null , tmpl),
                wrappedItems = {};
            else if (!tmpl)
                return tmpl = parentItem.tmpl,
                newTmplItems[parentItem.key] = parentItem,
                parentItem.nodes = [],
                parentItem.wrapped && updateWrapped(parentItem, parentItem.wrapped),
                jQuery(build(parentItem, null , parentItem.tmpl(jQuery, parentItem)));
            return tmpl ? (typeof data == "function" && (data = data.call(parentItem || {})),
            options && options.wrapped && updateWrapped(options, options.wrapped),
            ret = jQuery.isArray(data) ? jQuery.map(data, function(dataItem) {
                return dataItem ? newTmplItem(options, parentItem, tmpl, dataItem) : null 
            }) : [newTmplItem(options, parentItem, tmpl, data)],
            topLevel ? jQuery(build(parentItem, null , ret)) : ret) : []
        },
        tmplItem: function(elem) {
            var tmplItem;
            for (elem instanceof jQuery && (elem = elem[0]); elem && elem.nodeType === 1 && !(tmplItem = jQuery.data(elem, "tmplItem")) && (elem = elem.parentNode); )
                ;
            return tmplItem || topTmplItem
        },
        template: function(name, tmpl) {
            return tmpl ? (typeof tmpl == "string" ? tmpl = buildTmplFn(tmpl) : tmpl instanceof jQuery && (tmpl = tmpl[0] || {}),
            tmpl.nodeType && (tmpl = jQuery.data(tmpl, "tmpl") || jQuery.data(tmpl, "tmpl", buildTmplFn(tmpl.innerHTML))),
            typeof name == "string" ? jQuery.template[name] = tmpl : tmpl) : name ? typeof name != "string" ? jQuery.template(null , name) : jQuery.template[name] || jQuery.template(null , htmlExpr.test(name) ? name : jQuery(name)) : null 
        },
        encode: function(text) {
            return ("" + text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;")
        }
    });
    jQuery.extend(jQuery.tmpl, {
        tag: {
            tmpl: {
                _default: {
                    $2: "null"
                },
                open: "if($notnull_1){_=_.concat($item.nest($1,$2));}"
            },
            wrap: {
                _default: {
                    $2: "null"
                },
                open: "$item.calls(_,$1,$2);_=[];",
                close: "call=$item.calls();_=call._.concat($item.wrap(call,_));"
            },
            each: {
                _default: {
                    $2: "$index, $value"
                },
                open: "if($notnull_1){$.each($1a,function($2){with(this){",
                close: "}});}"
            },
            "if": {
                open: "if(($notnull_1) && $1a){",
                close: "}"
            },
            "else": {
                _default: {
                    $1: "true"
                },
                open: "}else if(($notnull_1) && $1a){"
            },
            html: {
                open: "if($notnull_1){_.push($1a);}"
            },
            "=": {
                _default: {
                    $1: "$data"
                },
                open: "if($notnull_1){_.push($.encode($1a));}"
            },
            "!": {
                open: ""
            }
        },
        complete: function() {
            newTmplItems = {}
        },
        afterManip: function(elem, fragClone, callback) {
            var content = fragClone.nodeType === 11 ? jQuery.makeArray(fragClone.childNodes) : fragClone.nodeType === 1 ? [fragClone] : [];
            callback.call(elem, fragClone);
            storeTmplItems(content);
            cloneIndex++
        }
    })
})(jQuery)
